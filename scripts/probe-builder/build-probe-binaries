#!/bin/bash
#
# This script builds a precompiled version of falco-probe for a bunch of kernels
# The precompiled binary is then obtained at runtime by sysdig-probe-loader
# Ideally, the community should expand this stuff with better support
#
set -euo pipefail

#
# For continuous integration log purposes, wget prints its own output to stderr
# so it can be convenient to redirect it to a file. This can be done directly
# at runtime.
#

PROBE_NAME="falco-probe"
PROBE_VERSION=$1
BASEDIR=$(pwd)
ARCH=$(uname -m)
URL_TIMEOUT=300
RETRY=10

if [ ! -d $BASEDIR/output ]; then
	mkdir $BASEDIR/output
fi

function build_probe {
	if [ ! -f $BASEDIR/output/$PROBE_NAME-$PROBE_VERSION-$ARCH-$KERNEL_RELEASE-$HASH.ko ] || [ ! -f $BASEDIR/output/$PROBE_NAME-$PROBE_VERSION-$ARCH-$KERNEL_RELEASE-$HASH_ORIG.ko ]; then
		echo Building $PROBE_NAME-$PROBE_VERSION-$ARCH-$KERNEL_RELEASE-$HASH.ko [${FUNCNAME[1]}]

		docker run --rm --name falco-probe-builder \
		  -v $BASEDIR/output:/output \
			-v $BUILDER_KERNEL_SOURCE:/kernel:ro \
			-e HASH=$HASH \
			-e KERNELDIR=$BUILDER_KERNELDIR \
			-e KERNEL_VERSION=$BUILDER_KERNEL_VERSION \
			sysdig/falco-probe-builder:$PROBE_VERSION || true
	else
	  echo Skipping $PROBE_NAME-$PROBE_VERSION-$ARCH-$KERNEL_RELEASE-$HASH.ko \(already built\)
	fi
}

function ubuntu_build {
	URL=$1
	DEB=$(echo $URL | grep -o '[^/]*$')
	KERNEL_RELEASE_FULL=$(echo $DEB | grep -E -o "[0-9]{1}\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+")		# ex. 3.13.0-24.47
	KERNEL_RELEASE=$(echo $KERNEL_RELEASE_FULL | grep -E -o "[0-9]{1}\.[0-9]+\.[0-9]+-[0-9]+")	# ex. 3.13.0-24
	KERNEL_UPDATE=$(echo $KERNEL_RELEASE_FULL | grep -E -o "[0-9]+$")							# ex. 47

	if [ ! -d $KERNEL_RELEASE ]; then
		mkdir $KERNEL_RELEASE
	fi

	cd $KERNEL_RELEASE

	if [ ! -d $KERNEL_UPDATE ]; then
		mkdir $KERNEL_UPDATE
	fi

	cd $KERNEL_UPDATE

	if [ ! -f $DEB ]; then
		echo Downloading $DEB [Ubuntu]
		wget --timeout=${URL_TIMEOUT} --tries=${RETRY} $URL
		dpkg -x $DEB ./
	fi

	NUM_DEB=$(ls linux-*.deb -1 | wc -l)

	if [ $NUM_DEB -eq 3 ]; then
		local KERNEL_FOLDER=$KERNEL_RELEASE
		KERNEL_RELEASE=$(ls -1 linux-image-* | grep -E -o "[0-9]{1}\.[0-9]+\.[0-9]+-[0-9]+-[a-z]+")

		HASH=$(md5sum boot/config-$KERNEL_RELEASE | cut -d' ' -f1)
		HASH_ORIG=$HASH

		BUILDER_KERNEL_SOURCE=$BASEDIR/$KERNEL_FOLDER/$KERNEL_UPDATE
		BUILDER_KERNELDIR=/usr/src/linux-headers-$KERNEL_RELEASE
		BUILDER_KERNEL_VERSION=""
		build_probe
	fi

	cd $BASEDIR
}

function rhel_build {
	URL=$1
	RPM=$(echo $URL | grep -o '[^/]*$')
	KERNEL_RELEASE=$(echo $RPM | awk 'match($0, /[^kernel\-(uek\-)?(core\-|devel\-)?].*[^(\.rpm)]/){ print substr($0, RSTART, RLENGTH) }')

	if [ ! -d $KERNEL_RELEASE ]; then
		mkdir $KERNEL_RELEASE
	fi

	cd $KERNEL_RELEASE

	if [ ! -f $RPM ]; then
		echo Downloading $RPM [RHEL and CentOS]
		wget --timeout=${URL_TIMEOUT} --tries=${RETRY} $URL
		rpm2cpio $RPM | cpio -idm
	fi

	NUM_RPM=$(ls kernel-*.rpm -1 | wc -l)

	if [ $NUM_RPM -eq 2 ]; then
		if [ -f boot/config-$KERNEL_RELEASE ]; then
			HASH=$(md5sum boot/config-$KERNEL_RELEASE | cut -d' ' -f1)
		else
			HASH=$(md5sum lib/modules/$KERNEL_RELEASE/config | cut -d' ' -f1)
		fi
		HASH_ORIG=$HASH

		BUILDER_KERNEL_SOURCE=$BASEDIR/$KERNEL_RELEASE
		BUILDER_KERNELDIR=/usr/src/kernels/$KERNEL_RELEASE
		BUILDER_KERNEL_VERSION=""
		build_probe
	fi

	cd $BASEDIR
}

function debian_build {
	URL=${1}
	DEB=$(echo ${URL} | grep -o '[^/]*$')

	if [[ ${DEB} == *"kbuild"* ]]; then
		if [[ ! -d ${BASEDIR}/common-dependencies/debian/kbuild/ ]]; then
			mkdir -p ${BASEDIR}/common-dependencies/debian/kbuild
		fi
		if [ ! -f ${BASEDIR}/common-dependencies/debian/kbuild/${DEB} ]; then
			echo Downloading ${DEB} [Debian]
			wget --timeout=${URL_TIMEOUT} --tries=${RETRY} -P ${BASEDIR}/common-dependencies/debian/kbuild ${URL}
		fi
		return
	else
		KERNEL_RELEASE=$(echo ${DEB} | grep -E -o "[0-9]{1}\.[0-9]+\.[0-9]+(-[0-9]+)?"| head -1)
		KERNEL_MAJOR=$(echo ${KERNEL_RELEASE} | grep -E -o "[0-9]{1}\.[0-9]+")
		PACKAGE=$(echo ${DEB} | grep -E -o "(common_[0-9]{1}\.[0-9]+.*amd64|amd64_[0-9]{1}\.[0-9]+.*amd64)" | sed -E 's/(common_|amd64_|_amd64)//g')

		if [[ ! -d ${KERNEL_RELEASE} ]]; then
			mkdir ${KERNEL_RELEASE}
		fi

		cd ${KERNEL_RELEASE}

		if [ ! -d ${PACKAGE} ]; then
			mkdir ${PACKAGE}
		fi

		cd ${PACKAGE}

		if [ ! -f ${DEB} ]; then
			echo Downloading ${DEB} [Debian]
			wget --timeout=${URL_TIMEOUT} --tries=${RETRY} ${URL}
			dpkg -x ${DEB} ./
		fi
	fi

	NUM_DEB=$(ls linux-*.deb -1| grep -v kbuild | wc -l)

	if [[ ${NUM_DEB} -eq 3 ]]; then
		set +e
		KBUILD_PACKAGE=$(ls -t ${BASEDIR}/common-dependencies/debian/kbuild | grep  "kbuild\-${KERNEL_MAJOR}" | head -1)
		set -e
		if [[ ! -z ${KBUILD_PACKAGE} ]]; then
			cp ${BASEDIR}/common-dependencies/debian/kbuild/${KBUILD_PACKAGE} .
			dpkg -x ${KBUILD_PACKAGE} ./

			local KERNEL_FOLDER=${KERNEL_RELEASE}
			KERNEL_RELEASE=$(ls boot/config-* | sed 's|boot/config-||')

			HASH=$(md5sum boot/config-${KERNEL_RELEASE} | cut -d' ' -f1)
			HASH_ORIG=${HASH}

			##fix symbolic links
			unlink ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/lib/modules/${KERNEL_RELEASE}/build
			ln -s ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/usr/src/linux-headers-${KERNEL_RELEASE} ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/lib/modules/${KERNEL_RELEASE}/build

			common_folder=$(ls ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/usr/src/ | egrep '*common')
			unlink ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/lib/modules/${KERNEL_RELEASE}/source
			ln -s ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/usr/src/${common_folder}  ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/lib/modules/${KERNEL_RELEASE}/source

			##hack Makefile
			sed -i '0,/MAKEARGS.*$/s||MAKEARGS := -C '"/kernel/usr/src/${common_folder}"' O='"/kernel/usr/src/linux-headers-${KERNEL_RELEASE}"'|' ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/usr/src/linux-headers-${KERNEL_RELEASE}/Makefile
			sed -i 's/@://' ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/usr/src/linux-headers-${KERNEL_RELEASE}/Makefile
			sed -i 's|$(cmd) %.*$|$(cmd) : all|' ${BASEDIR}/${KERNEL_FOLDER}/${PACKAGE}/usr/src/linux-headers-${KERNEL_RELEASE}/Makefile

			BUILDER_KERNEL_SOURCE=$BASEDIR/$KERNEL_FOLDER/$PACKAGE
			BUILDER_KERNELDIR=/usr/src/linux-headers-${KERNEL_RELEASE}
			BUILDER_KERNEL_VERSION=${KERNEL_RELEASE}
			build_probe
		fi
	fi

	cd ${BASEDIR}
}


#
# Ubuntu build
#

echo Building Ubuntu
DIR=$(dirname $(readlink -f $0))
URLS="$($DIR/kernel-crawler.py Ubuntu)"

for URL in $URLS
do
	ubuntu_build $URL
done

#
# RHEL build
#

echo Building RHEL
DIR=$(dirname $(readlink -f $0))
URLS="$($DIR/kernel-crawler.py CentOS)"

for URL in $URLS
do
	rhel_build $URL
done

#
# Fedora build
#

echo Building Fedora
DIR=$(dirname $(readlink -f $0))
URLS="$($DIR/kernel-crawler.py Fedora)"

for URL in $URLS
do
	rhel_build $URL
done

#
# Debian build
#
echo Building Debian
DIR=$(dirname $(readlink -f $0))
URLS="$($DIR/kernel-crawler.py Debian)"

for URL in $URLS
do
	debian_build $URL
done
