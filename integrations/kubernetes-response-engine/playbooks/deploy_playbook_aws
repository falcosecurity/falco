#!/bin/bash
#
# Deploys a playbook

set -e

function usage() {
  cat<<EOF
Usage: $0 [options]

-p playbook             Playbook to be deployed. Is the script for Kubeless: slack, taint, isolate.
-e environment          Environment variables for the Kubeless function.  You can pass multiple environment variables passing several -e parameters.
-k kubernetes_cluster   Kubernetes cluster from aws eks list-clusters where function will be applied.

You must pass the playbook and at least one topic to subscribe.

Example:

deploy_playbook -p slack -t "falco.error.*" -e SLACK_WEBHOOK_URL=http://foobar.com/... -k sysdig_eks
EOF
  exit 1
}

function join { local IFS="$1"; shift; echo "$*"; }

playbook=""
environment=("KUBECONFIG=kubeconfig" "KUBERNETES_LOAD_KUBE_CONFIG=1")
eks_cluster="${EKS_CLUSTER}"

while getopts "r:e:t:" arg; do
  case $arg in
    p)
      playbook="${OPTARG}"
      ;;
    e)
      environment+=("${OPTARG}")
      ;;
    k)
      eks_cluster="${OPTARG}"
      ;;
    *)
      usage
      ;;
  esac
done

if [[ "${playbook}" == "" ]] || [[ "${eks_cluster}" == "" ]]; then
  usage
fi

pipenv lock --requirements | sed '/^-/ d' > requirements.txt

mkdir -p lambda
pip install -t lambda -r requirements.txt
pip install -t lambda  .

aws eks update-kubeconfig --name "${eks_cluster}" --kubeconfig lambda/kubeconfig
sed -i "s/command: aws-iam-authenticator/command: .\/aws-iam-authenticator/g" lambda/kubeconfig

cp extra/aws-iam-authenticator lambda/

cp functions/"${playbook}".py lambda/

cd lambda
zip ../"${playbook}".zip  -r *
cd ..

aws lambda create-function \
  --function-name falco-"${playbook}" \
  --runtime python2.7 \
  --role $(terraform output --state=../deployment/aws/terraform.tfstate iam_for_lambda) \
  --environment Variables={"$(join , ${environment[*]})"} \
  --handler "${playbook}".handler \
  --zip-file fileb://./"${playbook}".zip

rm -fr "${playbook}".zip lambda requirements.txt
