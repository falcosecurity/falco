# This is a reusable workflow used by master and release CI
on:
  workflow_call:
    inputs:
      arch:
        description: x86_64 or aarch64
        required: true
        type: string
    outputs:
      version:
        description: 'Falco version extracted from config_falco.h'
        value: ${{ jobs.fetch-version.outputs.version }}    

jobs:
  # We need to use an ubuntu-latest to fetch Falco version because
  # Falco version is computed by some cmake scripts that do git sorceries
  # to get the current version.
  # But centos7 jobs have a git version too old and actions/checkout does not 
  # fully clone the repo, but uses http rest api instead.
  fetch-version:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      version: ${{ steps.store_version.outputs.version }}  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Install build dependencies
        run: |
          sudo apt update 
          sudo apt install -y cmake build-essential
      
      - name: Configure project
        run: |
          mkdir build && cd build
          cmake -DUSE_BUNDLED_DEPS=On ..
          
      - name: Load and store Falco version output
        id: store_version
        run: |
          FALCO_VERSION=$(cat build/userspace/falco/config_falco.h | grep 'FALCO_VERSION ' | cut -d' ' -f3 | sed -e 's/^"//' -e 's/"$//')
          echo "version=${FALCO_VERSION}" >> $GITHUB_OUTPUT     
        

  build-modern-bpf-skeleton:
    # See https://github.com/actions/runner/issues/409#issuecomment-1158849936
    runs-on: ${{ (inputs.arch == 'aarch64' && fromJSON('[ "self-hosted", "linux", "ARM64" ]')) || 'ubuntu-latest' }}
    needs: fetch-version
    container: fedora:latest
    steps:
      # Always install deps before invoking checkout action, to properly perform a full clone.
      - name: Install build dependencies
        run: |
          dnf install -y bpftool ca-certificates cmake make automake gcc gcc-c++ kernel-devel clang git pkg-config autoconf automake libbpf-devel
    
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build modern BPF skeleton
        run: |
          mkdir skeleton-build && cd skeleton-build
          cmake -DUSE_BUNDLED_DEPS=ON -DBUILD_FALCO_MODERN_BPF=ON -DCREATE_TEST_TARGETS=Off -DFALCO_VERSION=${{ needs.fetch-version.outputs.version }} ..
          make ProbeSkeleton -j6
          
      - name: Upload skeleton
        uses: actions/upload-artifact@v3
        with:
          name: bpf_probe_${{ inputs.arch }}.skel.h
          path: skeleton-build/skel_dir/bpf_probe.skel.h
          
  build-packages:
    # See https://github.com/actions/runner/issues/409#issuecomment-1158849936
    runs-on: ${{ (inputs.arch == 'aarch64' && fromJSON('[ "self-hosted", "linux", "ARM64" ]')) || 'ubuntu-latest' }}
    needs: [fetch-version, build-modern-bpf-skeleton]
    container: centos:7
    steps:
      # Always install deps before invoking checkout action, to properly perform a full clone.
      - name: Install build dependencies
        run: |
          yum -y install centos-release-scl
          yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++
          source /opt/rh/devtoolset-9/enable
          yum install -y wget git make m4 rpm-build
    
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Download skeleton
        uses: actions/download-artifact@v3
        with:
          name: bpf_probe_${{ inputs.arch }}.skel.h
          path: /tmp
          
      - name: Install updated cmake
        run: |
          curl -L -o /tmp/cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.22.5/cmake-3.22.5-linux-$(uname -m).tar.gz
          gzip -d /tmp/cmake.tar.gz
          tar -xpf /tmp/cmake.tar --directory=/tmp
          cp -R /tmp/cmake-3.22.5-linux-$(uname -m)/* /usr
          rm -rf /tmp/cmake-3.22.5-linux-$(uname -m)
    
      - name: Prepare project
        run: |
          mkdir build && cd build
          source /opt/rh/devtoolset-9/enable
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DUSE_BUNDLED_DEPS=On \
              -DFALCO_ETC_DIR=/etc/falco \
              -DBUILD_FALCO_MODERN_BPF=ON \
              -DMODERN_BPF_SKEL_DIR=/tmp \
              -DBUILD_DRIVER=Off \
              -DBUILD_BPF=Off \
              -DFALCO_VERSION=${{ needs.fetch-version.outputs.version }} \
              ..
              
      - name: Build project
        run: |
          cd build
          source /opt/rh/devtoolset-9/enable
          make falco -j6
      
      - name: Build packages
        run: |
          cd build
          source /opt/rh/devtoolset-9/enable
          make package

      - name: Upload Falco tar.gz package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ needs.fetch-version.outputs.version }}-${{ inputs.arch }}.tar.gz
          path: |
            ${{ github.workspace }}/build/falco-*.tar.gz
            
      - name: Upload Falco deb package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ needs.fetch-version.outputs.version }}-${{ inputs.arch }}.deb
          path: |
            ${{ github.workspace }}/build/falco-*.deb
      
      - name: Upload Falco rpm package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ needs.fetch-version.outputs.version }}-${{ inputs.arch }}.rpm
          path: |
            ${{ github.workspace }}/build/falco-*.rpm
            
  build-musl-package:
    needs: fetch-version
    # x86_64 only for now
    if: ${{ inputs.arch == 'x86_64' }}
    runs-on: ubuntu-latest
    container: alpine:3.17
    steps:
      # Always install deps before invoking checkout action, to properly perform a full clone.
      - name: Install build dependencies
        run: |
          apk add g++ gcc cmake make git bash perl linux-headers autoconf automake m4 libtool elfutils-dev libelf-static patch binutils bpftool clang
    
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Prepare project
        run: |
          mkdir build && cd build
          cmake -DCPACK_GENERATOR=TGZ -DBUILD_BPF=Off -DBUILD_DRIVER=Off -DCMAKE_BUILD_TYPE=Release -DUSE_BUNDLED_DEPS=On -DUSE_BUNDLED_LIBELF=Off -DBUILD_LIBSCAP_MODERN_BPF=ON -DMUSL_OPTIMIZED_BUILD=On -DFALCO_ETC_DIR=/etc/falco ../ -DFALCO_VERSION=${{ needs.fetch-version.outputs.version }}
          
      - name: Build project
        run: |
          cd build
          make -j6 all
      
      - name: Build packages
        run: |
          cd build
          make -j6 package
          
      - name: Upload Falco static package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ needs.fetch-version.outputs.version }}-static-x86_64.tar.gz
          path: |
            ${{ github.workspace }}/build/falco-*.tar.gz
